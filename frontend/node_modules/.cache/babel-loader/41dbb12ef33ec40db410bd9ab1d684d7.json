{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/youssef/Documents/workSpace/mern_e_commerce/frontend/src/screens/UserEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Loader } from '../components/Loader';\nimport { Message } from '../components/Message';\nimport FormContainer from '../components/FormContainer';\nimport { updateUser, getUserDetails } from '../store/actions/userActions';\nimport { USER_UPDATE_RESET } from '../store/constants/userConstant';\n\nconst UserEditScreen = ({\n  location,\n  history,\n  match\n}) => {\n  _s();\n\n  const userId = match.params.id;\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n  const dispatch = useDispatch();\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  const userUpdate = useSelector(state => state.userUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = userUpdate;\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: USER_UPDATE_RESET\n      });\n      history.push('/admin');\n    }\n\n    if (!user.name || user._id !== userId) {\n      dispatch(getUserDetails(userId));\n    } else {\n      setName(user.name);\n      setEmail(user.email);\n      setIsAdmin(user.isAdmin);\n    }\n  }, [dispatch, user, userId]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: `/admin/userlist`,\n      className: \"btn btn-light my-3\",\n      children: \"Go Back \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 18\n      }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 41\n      }, this) : /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"name\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"name \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: name,\n            placeholder: \"Enter name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: email,\n            placeholder: \"Enter Email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"isAdmin\",\n          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            label: \"Is Admin\",\n            checked: isAdmin,\n            onChange: e => setIsAdmin(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"py-3\",\n        children: /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UserEditScreen, \"LtVM2fyU03Lv8E/dzeyI0IZpb8g=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = UserEditScreen;\nexport default UserEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditScreen\");","map":{"version":3,"sources":["/home/youssef/Documents/workSpace/mern_e_commerce/frontend/src/screens/UserEditScreen.js"],"names":["React","useState","useEffect","Link","Form","Button","Row","Col","useDispatch","useSelector","Loader","Message","FormContainer","updateUser","getUserDetails","USER_UPDATE_RESET","UserEditScreen","location","history","match","userId","params","id","email","setEmail","name","setName","isAdmin","setIsAdmin","dispatch","userDetails","state","loading","error","user","userUpdate","loadingUpdate","errorUpdate","success","successUpdate","type","push","_id","submitHandler","e","preventDefault","target","value","checked"],"mappings":"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","sourcesContent":["\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Loader } from '../components/Loader';\nimport { Message } from '../components/Message';\nimport FormContainer from '../components/FormContainer';\nimport { updateUser,getUserDetails } from '../store/actions/userActions';\nimport {USER_UPDATE_RESET} from '../store/constants/userConstant'\n\nconst UserEditScreen = ({location,history,match}) => {\n  const userId = match.params.id\n\n\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n \n \n\n  const dispatch = useDispatch()\n\n  const userDetails = useSelector(state=>state.userDetails)\n  const {loading, error , user}= userDetails\n\n  const userUpdate = useSelector(state=>state.userUpdate)\n  const {loading:loadingUpdate, error:errorUpdate , success:successUpdate}= userUpdate\n\nuseEffect(()=>{\n    if(successUpdate){\n        dispatch({type:USER_UPDATE_RESET})\n        history.push('/admin')\n    }\n\n\n    if(!user.name || user._id !== userId){\n     dispatch(getUserDetails(userId))\n    }else{\n        setName(user.name)\n        setEmail(user.email)\n        setIsAdmin(user.isAdmin)\n    }\n\n},[dispatch,user,userId])\n\n  const submitHandler = (e) => {\n  e.preventDefault()\n\n\n\n  };\n\n  return (\n    <>\n        <Link to ={`/admin/userlist`} className='btn btn-light my-3'>Go Back </Link>\n\n\n\n        <FormContainer>\n      <h1>Edit User</h1>\n      {/* {message && <Message   >{message}</Message>}\n      {error && <Message   >{error}</Message>} */}\n      {loading ? <Loader/>  : error ?   <Message   >{error}</Message>:(\n\n\n          <Form onSubmit={submitHandler}>\n\n      <Form.Group controlId='name'>\n          <Form.Label>name </Form.Label>\n          <Form.Control\n            type={name}\n            placeholder='Enter name'\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId='email'>\n          <Form.Label>Email Address</Form.Label>\n          <Form.Control\n            type={email}\n            placeholder='Enter Email'\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId='isAdmin'>\n         \n          <Form.Check\n            type='checkbox'\n            label='Is Admin'\n            \n            checked={isAdmin}\n            onChange={(e) => setIsAdmin(e.target.checked)}\n          ></Form.Check>\n        </Form.Group>\n\n        <Button type='submit' variant='primary'>\n          Update\n        </Button>\n      </Form>\n      )\n      \n      \n      }\n      \n      <Row className='py-3'>\n        <Col>\n          {/* <Link to={redirect ? `/login?redirect=${redirect}` : `/login`}>\n            Have an Account ?\n          </Link> */}\n        </Col>\n      </Row>\n    </FormContainer>\n    </>\n\n\n    \n  );\n};\n\nexport default UserEditScreen;\n\n"]},"metadata":{},"sourceType":"module"}